// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: metrics.sql

package data

import (
	"context"
)

const createDecryptionData = `-- name: CreateDecryptionData :exec
INSERT into decryption_data(
    eon,
	identity_preimage,
	decryption_key,
	slot
) 
VALUES ($1, $2, $3, $4) 
ON CONFLICT DO NOTHING
`

type CreateDecryptionDataParams struct {
	Eon              int64
	IdentityPreimage []byte
	DecryptionKey    []byte
	Slot             int64
}

func (q *Queries) CreateDecryptionData(ctx context.Context, arg CreateDecryptionDataParams) error {
	_, err := q.db.Exec(ctx, createDecryptionData,
		arg.Eon,
		arg.IdentityPreimage,
		arg.DecryptionKey,
		arg.Slot,
	)
	return err
}

const createDecryptionKeyShare = `-- name: CreateDecryptionKeyShare :exec
INSERT into decryption_key_share(
	eon,
	identity_preimage,
	keyper_index,
    decryption_key_share,
	slot
) 
VALUES ($1, $2, $3, $4, $5) 
ON CONFLICT DO NOTHING
`

type CreateDecryptionKeyShareParams struct {
	Eon                int64
	IdentityPreimage   []byte
	KeyperIndex        int64
	DecryptionKeyShare []byte
	Slot               int64
}

func (q *Queries) CreateDecryptionKeyShare(ctx context.Context, arg CreateDecryptionKeyShareParams) error {
	_, err := q.db.Exec(ctx, createDecryptionKeyShare,
		arg.Eon,
		arg.IdentityPreimage,
		arg.KeyperIndex,
		arg.DecryptionKeyShare,
		arg.Slot,
	)
	return err
}

const createEncryptedTx = `-- name: CreateEncryptedTx :exec
INSERT into encrypted_tx (
    tx_index, 
	eon,
	tx,
	identity_preimage
) 
VALUES ($1, $2, $3, $4)
ON CONFLICT DO NOTHING
`

type CreateEncryptedTxParams struct {
	TxIndex          int64
	Eon              int64
	Tx               []byte
	IdentityPreimage []byte
}

func (q *Queries) CreateEncryptedTx(ctx context.Context, arg CreateEncryptedTxParams) error {
	_, err := q.db.Exec(ctx, createEncryptedTx,
		arg.TxIndex,
		arg.Eon,
		arg.Tx,
		arg.IdentityPreimage,
	)
	return err
}

const queryDecryptionData = `-- name: QueryDecryptionData :many
SELECT eon, identity_preimage, decryption_key, slot, block_hash, created_at, updated_at FROM decryption_data
WHERE eon = $1 AND identity_preimage = $2
`

type QueryDecryptionDataParams struct {
	Eon              int64
	IdentityPreimage []byte
}

func (q *Queries) QueryDecryptionData(ctx context.Context, arg QueryDecryptionDataParams) ([]DecryptionDatum, error) {
	rows, err := q.db.Query(ctx, queryDecryptionData, arg.Eon, arg.IdentityPreimage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DecryptionDatum
	for rows.Next() {
		var i DecryptionDatum
		if err := rows.Scan(
			&i.Eon,
			&i.IdentityPreimage,
			&i.DecryptionKey,
			&i.Slot,
			&i.BlockHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryDecryptionKeyShare = `-- name: QueryDecryptionKeyShare :many
SELECT eon, identity_preimage, keyper_index, decryption_key_share, slot, created_at, updated_at FROM decryption_key_share
WHERE eon = $1 AND identity_preimage = $2 AND keyper_index = $3
`

type QueryDecryptionKeyShareParams struct {
	Eon              int64
	IdentityPreimage []byte
	KeyperIndex      int64
}

func (q *Queries) QueryDecryptionKeyShare(ctx context.Context, arg QueryDecryptionKeyShareParams) ([]DecryptionKeyShare, error) {
	rows, err := q.db.Query(ctx, queryDecryptionKeyShare, arg.Eon, arg.IdentityPreimage, arg.KeyperIndex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DecryptionKeyShare
	for rows.Next() {
		var i DecryptionKeyShare
		if err := rows.Scan(
			&i.Eon,
			&i.IdentityPreimage,
			&i.KeyperIndex,
			&i.DecryptionKeyShare,
			&i.Slot,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryEncryptedTx = `-- name: QueryEncryptedTx :many
SELECT tx_index, eon, tx, identity_preimage, created_at, updated_at FROM encrypted_tx
WHERE tx_index = $1 AND eon = $2
`

type QueryEncryptedTxParams struct {
	TxIndex int64
	Eon     int64
}

func (q *Queries) QueryEncryptedTx(ctx context.Context, arg QueryEncryptedTxParams) ([]EncryptedTx, error) {
	rows, err := q.db.Query(ctx, queryEncryptedTx, arg.TxIndex, arg.Eon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EncryptedTx
	for rows.Next() {
		var i EncryptedTx
		if err := rows.Scan(
			&i.TxIndex,
			&i.Eon,
			&i.Tx,
			&i.IdentityPreimage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlockHash = `-- name: UpdateBlockHash :exec
UPDATE decryption_data
SET block_hash = $2
WHERE slot = $1
`

type UpdateBlockHashParams struct {
	Slot      int64
	BlockHash []byte
}

func (q *Queries) UpdateBlockHash(ctx context.Context, arg UpdateBlockHashParams) error {
	_, err := q.db.Exec(ctx, updateBlockHash, arg.Slot, arg.BlockHash)
	return err
}
