// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: metrics.sql

package data

import (
	"context"
)

const createDecryptionKey = `-- name: CreateDecryptionKey :exec
INSERT into decryption_key(
    eon,
	identity_preimage,
	key
) 
VALUES ($1, $2, $3) 
ON CONFLICT DO NOTHING
`

type CreateDecryptionKeyParams struct {
	Eon              int64
	IdentityPreimage []byte
	Key              []byte
}

func (q *Queries) CreateDecryptionKey(ctx context.Context, arg CreateDecryptionKeyParams) error {
	_, err := q.db.Exec(ctx, createDecryptionKey, arg.Eon, arg.IdentityPreimage, arg.Key)
	return err
}

const createDecryptionKeyMessage = `-- name: CreateDecryptionKeyMessage :exec
INSERT into decryption_keys_message(
    slot,
	instance_id,
	eon,
	tx_pointer
) 
VALUES ($1, $2, $3, $4) 
ON CONFLICT DO NOTHING
`

type CreateDecryptionKeyMessageParams struct {
	Slot       int64
	InstanceID int64
	Eon        int64
	TxPointer  int64
}

func (q *Queries) CreateDecryptionKeyMessage(ctx context.Context, arg CreateDecryptionKeyMessageParams) error {
	_, err := q.db.Exec(ctx, createDecryptionKeyMessage,
		arg.Slot,
		arg.InstanceID,
		arg.Eon,
		arg.TxPointer,
	)
	return err
}

const createDecryptionKeyShare = `-- name: CreateDecryptionKeyShare :exec
INSERT into decryption_key_share(
	eon,
	identity_preimage,
	keyper_index,
    decryption_key_share,
	slot
) 
VALUES ($1, $2, $3, $4, $5) 
ON CONFLICT DO NOTHING
`

type CreateDecryptionKeyShareParams struct {
	Eon                int64
	IdentityPreimage   []byte
	KeyperIndex        int64
	DecryptionKeyShare []byte
	Slot               int64
}

func (q *Queries) CreateDecryptionKeyShare(ctx context.Context, arg CreateDecryptionKeyShareParams) error {
	_, err := q.db.Exec(ctx, createDecryptionKeyShare,
		arg.Eon,
		arg.IdentityPreimage,
		arg.KeyperIndex,
		arg.DecryptionKeyShare,
		arg.Slot,
	)
	return err
}

const createDecryptionKeysMessageDecryptionKey = `-- name: CreateDecryptionKeysMessageDecryptionKey :exec
INSERT into decryption_keys_message_decryption_key(
    decryption_keys_message_slot,
	key_index,
	decryption_key_eon,
	decryption_key_identity_preimage
) 
VALUES ($1, $2, $3, $4) 
ON CONFLICT DO NOTHING
`

type CreateDecryptionKeysMessageDecryptionKeyParams struct {
	DecryptionKeysMessageSlot     int64
	KeyIndex                      int64
	DecryptionKeyEon              int64
	DecryptionKeyIdentityPreimage []byte
}

func (q *Queries) CreateDecryptionKeysMessageDecryptionKey(ctx context.Context, arg CreateDecryptionKeysMessageDecryptionKeyParams) error {
	_, err := q.db.Exec(ctx, createDecryptionKeysMessageDecryptionKey,
		arg.DecryptionKeysMessageSlot,
		arg.KeyIndex,
		arg.DecryptionKeyEon,
		arg.DecryptionKeyIdentityPreimage,
	)
	return err
}

const createTransactionSubmittedEvent = `-- name: CreateTransactionSubmittedEvent :exec
INSERT into transaction_submitted_event (
    event_block_hash, 
	event_block_number,
	event_tx_index,
	event_log_index,
	eon,
	tx_index,
	identity_prefix,
	sender,
	encrypted_transaction
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT DO NOTHING
`

type CreateTransactionSubmittedEventParams struct {
	EventBlockHash       []byte
	EventBlockNumber     int64
	EventTxIndex         int64
	EventLogIndex        int64
	Eon                  int64
	TxIndex              int64
	IdentityPrefix       []byte
	Sender               []byte
	EncryptedTransaction []byte
}

func (q *Queries) CreateTransactionSubmittedEvent(ctx context.Context, arg CreateTransactionSubmittedEventParams) error {
	_, err := q.db.Exec(ctx, createTransactionSubmittedEvent,
		arg.EventBlockHash,
		arg.EventBlockNumber,
		arg.EventTxIndex,
		arg.EventLogIndex,
		arg.Eon,
		arg.TxIndex,
		arg.IdentityPrefix,
		arg.Sender,
		arg.EncryptedTransaction,
	)
	return err
}

const queryDecryptionKeyShare = `-- name: QueryDecryptionKeyShare :many
SELECT eon, identity_preimage, keyper_index, decryption_key_share, slot, created_at, updated_at FROM decryption_key_share
WHERE eon = $1 AND identity_preimage = $2 AND keyper_index = $3
`

type QueryDecryptionKeyShareParams struct {
	Eon              int64
	IdentityPreimage []byte
	KeyperIndex      int64
}

func (q *Queries) QueryDecryptionKeyShare(ctx context.Context, arg QueryDecryptionKeyShareParams) ([]DecryptionKeyShare, error) {
	rows, err := q.db.Query(ctx, queryDecryptionKeyShare, arg.Eon, arg.IdentityPreimage, arg.KeyperIndex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DecryptionKeyShare
	for rows.Next() {
		var i DecryptionKeyShare
		if err := rows.Scan(
			&i.Eon,
			&i.IdentityPreimage,
			&i.KeyperIndex,
			&i.DecryptionKeyShare,
			&i.Slot,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
